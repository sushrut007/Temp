interface IHidingPlace {  string HidingPlaceName { get; } } class RoomWithHidingPlace : Room, IHidingPlace {  public RoomWithHidingPlace(string name, string decoration, string hidingPlaceName)  : base(name, decoration)  {  this.hidingPlaceName = hidingPlaceName;
 }   private string hidingPlaceName;
 public string HidingPlaceName {  get { return hidingPlaceName; }  }   public override string Description {  get {  return base.Description + “ Someone could hide “ + hidingPlaceName + “.”;
 }  } } class RoomWithDoor : RoomWithHidingPlace, IHasExteriorDoor {  public RoomWithDoor(string name, string decoration,  string hidingPlaceName, string doorDescription)  : base(name, decoration, hidingPlaceName)  {  this.doorDescription = doorDescription;
 }  private string doorDescription;
 public string DoorDescription {  get { return doorDescription; }  }  private Location doorLocation;
 public Location DoorLocation {  get { return doorLocation; }  set { doorLocation = value; }  }}

class OutsideWithHidingPlace : Outside, IHidingPlace {  public OutsideWithHidingPlace(string name, bool hot, string hidingPlaceName)  : base(name, hot)  { this.hidingPlaceName = hidingPlaceName; }  private string hidingPlaceName;
 public string HidingPlaceName {  get { return hidingPlaceName; }  }  public override string Description {  get {  return base.Description + “ Someone could hide ” + hidingPlaceName + “.”;
 }  } } class Opponent {  private Random random;
 private Location myLocation;
 public Opponent(Location startingLocation) {  myLocation = startingLocation;
 random = new Random();
 }  public void Move() {  if (myLocation is IHasExteriorDoor) {  IHasExteriorDoor LocationWithDoor =  myLocation as IHasExteriorDoor;
 if (random.Next(2) == 1)  myLocation = LocationWithDoor.DoorLocation;
 }  bool hidden = false;
 while (!hidden) {  int rand = random.Next(myLocation.Exits.Length);
 myLocation = myLocation.Exits[rand];
 if (myLocation is IHidingPlace)  hidden = true;
 }  }  public bool Check(Location locationToCheck) {  if (locationToCheck != myLocation)  return false;
 else  return true;
 }}

public Form1() {  InitializeComponent();
 CreateObjects();
 opponent = new Opponent(frontYard);
 ResetGame(false);}

private void MoveToANewLocation(Location newLocation) {  Moves++;
 currentLocation = newLocation;
 RedrawForm();
} private void RedrawForm() {  exits.Items.Clear();
 for (int i = 0; i < currentLocation.Exits.Length; i++)  exits.Items.Add(currentLocation.Exits[i].Name);
 exits.SelectedIndex = 0;
 description.Text = currentLocation.Description + “\r\n(move #” + Moves + “)”;
 if (currentLocation is IHidingPlace) {  IHidingPlace hidingPlace = currentLocation as IHidingPlace;
 check.Text = “Check “ + hidingPlace.HidingPlaceName;
 check.Visible = true;
 }  else  check.Visible = false;
 if (currentLocation is IHasExteriorDoor)  goThroughTheDoor.Visible = true;
 else  goThroughTheDoor.Visible = false;}

private void CreateObjects() {  livingRoom = new RoomWithDoor(“Living Room”, “an antique carpet”,  “inside the closet”, “an oak door with a brass handle”);
 diningRoom = new RoomWithHidingPlace(“Dining Room”, “a crystal chandelier”,  “in the tall armoire”);
 kitchen = new RoomWithDoor(“Kitchen”, “stainless steel appliances”,  “in the cabinet”, “a screen door”);
 stairs = new Room(“Stairs”, “a wooden bannister”);
 hallway = new RoomWithHidingPlace(“Upstairs Hallway”, “a picture of a dog”,  “in the closet”);
 bathroom = new RoomWithHidingPlace(“Bathroom”, “a sink and a toilet”,  “in the shower”);
 masterBedroom = new RoomWithHidingPlace(“Master Bedroom”, “a large bed”,  “under the bed”);
 secondBedroom = new RoomWithHidingPlace(“Second Bedroom”, “a small bed”,  “under the bed”);
 frontYard = new OutsideWithDoor(“Front Yard”, false, “a heavy-looking oak door”);
 backYard = new OutsideWithDoor(“Back Yard”, true, “a screen door”);
 garden = new OutsideWithHidingPlace(“Garden”, false, “inside the shed”);
 driveway = new OutsideWithHidingPlace(“Driveway”, true, “in the garage”);
 diningRoom.Exits = new Location[] { livingRoom, kitchen };
 livingRoom.Exits = new Location[] { diningRoom, stairs };
 kitchen.Exits = new Location[] { diningRoom };
 stairs.Exits = new Location[] { livingRoom, hallway };
 hallway.Exits = new Location[] { stairs, bathroom, masterBedroom, secondBedroom };
 bathroom.Exits = new Location[] { hallway };
 masterBedroom.Exits = new Location[] { hallway };
 secondBedroom.Exits = new Location[] { hallway };
 frontYard.Exits = new Location[] { backYard, garden, driveway };
 backYard.Exits = new Location[] { frontYard, garden, driveway };
 garden.Exits = new Location[] { backYard, frontYard };
 driveway.Exits = new Location[] { backYard, frontYard };
 livingRoom.DoorLocation = frontYard;
 frontYard.DoorLocation = livingRoom;
 kitchen.DoorLocation = backYard;
 backYard.DoorLocation = kitchen;}

private void ResetGame(bool displayMessage) {  if (displayMessage) {  MessageBox.Show(“You found me in ” + Moves + “ moves!”);
 IHidingPlace foundLocation = currentLocation as IHidingPlace;
 description.Text = “You found your opponent in “ + Moves  + “ moves! He was hiding ” + foundLocation.HidingPlaceName + “.”;
 }  Moves = 0;
 hide.Visible = true;
 goHere.Visible = false;
 check.Visible = false;
 goThroughTheDoor.Visible = false;
 exits.Visible = false;
} private void check_Click(object sender, EventArgs e) {  Moves++;
 if (opponent.Check(currentLocation))  ResetGame(true);
 else  RedrawForm();
} private void hide_Click(object sender, EventArgs e) {  hide.Visible = false;
 for (int i = 1; i <= 10; i++) {  opponent.Move();
 description.Text = i + “... “;
 Application.DoEvents();
 System.Threading.Thread.Sleep(200);
 }  description.Text = “Ready or not, here I come!”;
 Application.DoEvents();
 System.Threading.Thread.Sleep(500);
 goHere.Visible = true;
 exits.Visible = true;
 MoveToANewLocation(livingRoom);}