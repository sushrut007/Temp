class Deck {  private List<Card> cards;
 private Random random = new Random();
  public Deck() {  cards = new List<Card>();
 for (int suit = 0; suit <= 3; suit++)  for (int value = 1; value <= 13; value++)  cards.Add(new Card((Suits)suit, (Values)value));
 }   public Deck(IEnumerable<Card> initialCards) {  cards = new List<Card>(initialCards);
 }   public int Count { get { return cards.Count; } }   public void Add(Card cardToAdd) {  cards.Add(cardToAdd);
 }   public Card Deal(int index) {  Card CardToDeal = cards[index];
 cards.RemoveAt(index);
 return CardToDeal;
 }   public void Shuffle() {  List<Card> NewCards = new List<Card>();
 while (cards.Count > 0) {  int CardToMove = random.Next(cards.Count);
 NewCards.Add(cards[CardToMove]);
 cards.RemoveAt(CardToMove);
 }  cards = NewCards;
 }   public IEnumerable<string> GetCardNames() {  string[] CardNames = new string[cards.Count];
 for (int i = 0; i < cards.Count; i++)  CardNames[i] = cards[i].Name;
 return CardNames;
 }   public void Sort() {  cards.Sort(new CardComparer_bySuit());
 }}
class CardComparer_bySuit : IComparer<Card> {  public int Compare(Card x, Card y)  {  if (x.Suit > y.Suit)  return 1;
 if (x.Suit < y.Suit)  return -1;
 if (x.Value > y.Value)  return 1;
 if (x.Value < y.Value)  return -1;
 return 0;
 } }  Deck deck1;
 Deck deck2;
 Random random = new Random();
 public Form1() {  InitializeComponent();
 ResetDeck(1);
 ResetDeck(2);
 RedrawDeck(1);
 RedrawDeck(2);
 }  private void ResetDeck(int deckNumber) {  if (deckNumber == 1) {  int numberOfCards = random.Next(1, 11);
 deck1 = new Deck(new Card[] { });
 for (int i = 0; i < numberOfCards; i++)  deck1.Add(new Card((Suits)random.Next(4),  (Values)random.Next(1, 14)));
 deck1.Sort();
 } else  deck2 = new Deck();
}
private void reset1_Click(object sender, EventArgs e) {  ResetDeck(1);
 RedrawDeck(1);
 }  private void reset2_Click(object sender, EventArgs e) {  ResetDeck(2);
 RedrawDeck(2);
 }  private void shuffle1_Click(object sender, EventArgs e) {  deck1.Shuffle();
 RedrawDeck(1);
 }  private void shuffle2_Click(object sender, EventArgs e) {  deck2.Shuffle();
 RedrawDeck(2);
 }  private void moveToDeck1_Click(object sender, EventArgs e) {  if (listBox2.SelectedIndex >= 0)  if (deck2.Count > 0) {  deck1.Add(deck2.Deal(listBox2.SelectedIndex));
 }  RedrawDeck(1);
 RedrawDeck(2);
 }  private void moveToDeck2_Click(object sender, EventArgs e) {  if (listBox1.SelectedIndex >= 0)  if (deck1.Count > 0)  deck2.Add(deck1.Deal(listBox1.SelectedIndex));
 RedrawDeck(1);
 RedrawDeck(2);
 }
}

private void Deal() {  stock.Shuffle();
 for (int i = 0; i < 5; i++)  foreach (Player player in players)  player.TakeCard(stock.Deal());
 foreach (Player player in players)  PullOutBooks(player);
 }  public bool PlayOneRound(int selectedPlayerCard) {  Values cardToAskFor = players[0].Peek(selectedPlayerCard).Value;
 for (int i = 0; i < players.Count; i++) {  if (i == 0)  players[0].AskForACard(players, 0, stock, cardToAskFor);
 else  players[i].AskForACard(players, i, stock);
 if (PullOutBooks(players[i])) {  textBoxOnForm.Text += players[i].Name  + “ drew a new hand” + Environment.NewLine;
 int card = 1;
 while (card <= 5 && stock.Count > 0) {  players[i].TakeCard(stock.Deal());
 card++;
 }  }  players[0].SortHand();
 if (stock.Count == 0) {  textBoxOnForm.Text =  “The stock is out of cards. Game over!” + Environment.NewLine;
 return true;
 }  }  return false;
 }  public bool PullOutBooks(Player player)  {  IEnumerable<Values> booksPulled = player.PullOutBooks();
 foreach (Values value in booksPulled)  books.Add(value, player);
 if (player.CardCount == 0)  return true;
 return false;}
public string DescribeBooks() {  string whoHasWhichBooks = “”;
 foreach (Values value in books.Keys)  whoHasWhichBooks += books[value].Name + “ has a book of ”  + Card.Plural(value) + Environment.NewLine;
 return whoHasWhichBooks;
 }  public string GetWinnerName() {  Dictionary<string, int> winners = new Dictionary<string, int>();
 foreach (Values value in books.Keys) {  string name = books[value].Name;
 if (winners.ContainsKey(name))  winners[name]++;
 else  winners.Add(name, 1);
 }  int mostBooks = 0;
 foreach (string name in winners.Keys)  if (winners[name] > mostBooks)  mostBooks = winners[name];
 bool tie = false;
 string winnerList = “”;
 foreach (string name in winners.Keys)  if (winners[name] == mostBooks)  {  if (!String.IsNullOrEmpty(winnerList))  {  winnerList += “ and ”;
 tie = true;
 }  winnerList += name;
 }  winnerList += “ with ” + mostBooks + “ books”;
 if (tie)  return “A tie between ” + winnerList;
 else  return winnerList;}
public Player(String name, Random random, TextBox textBoxOnForm) {  this.name = name;
 this.random = random;
 this.textBoxOnForm = textBoxOnForm;
 this.cards = new Deck( new Card[] {} );
 textBoxOnForm.Text += name +  “ has just joined the game” + Environment.NewLine;
} public Values GetRandomValue() {  Card randomCard = cards.Peek(random.Next(cards.Count));
 return randomCard.Value;
} public Deck DoYouHaveAny(Values value) {  Deck cardsIHave = cards.PullOutValues(value);
 textBoxOnForm.Text += Name + “ has ” + cardsIHave.Count + “ ”  + Card.Plural(value) + Environment.NewLine;
 return cardsIHave;
} public void AskForACard(List<Player> players, int myIndex, Deck stock) {  Values randomValue = GetRandomValue();
 AskForACard(players, myIndex, stock, randomValue);
} public void AskForACard(List<Player> players, int myIndex,  Deck stock, Values value) {  textBoxOnForm.Text += Name + “ asks if anyone has a ”  + value + Environment.NewLine;
 int totalCardsGiven = 0;
 for (int i = 0; i < players.Count; i++) {  if (i != myIndex) {  Player player = players[i];
 Deck CardsGiven = player.DoYouHaveAny(value);
 totalCardsGiven += CardsGiven.Count;
 while (CardsGiven.Count > 0)  cards.Add(CardsGiven.Deal());
 }  }  if (totalCardsGiven == 0) {  textBoxOnForm.Text += Name +  “ must draw from the stock.” + Environment.NewLine;
 cards.Add(stock.Deal());
 }}